{"version":3,"file":"static/js/475.a02163c2.chunk.js","mappings":"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","sources":["components/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.styled.js","components/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.jsx","components/ChoosedMonth/CalendarTable/CalendarTable.styled.js","components/ChoosedMonth/TaskCalendar/TaskCalendar.styled.js","components/ChoosedMonth/TaskCalendar/TaskCalendar.jsx","components/ChoosedMonth/CalendarTable/CalendarTable.jsx","components/ChoosedMonth/ChoosedMonth.jsx","redux/tasks/selectors.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/getDay/index.js","../node_modules/date-fns/esm/startOfMonth/index.js","../node_modules/date-fns/esm/toDate/index.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport { variables } from '../../../Styles/GlobalStyle';\n\nexport const MobileDaysList = styled.ul`\n  width: 335px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  gap: 34px;\n  padding: 16px 16px;\n  margin: auto;\n  margin-bottom: 14px;\n\n  background: ${variables.colors.background};\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  border-radius: 8px;\n\n  @media screen and (min-width: ${variables.breakpoints.tablet}) {\n    display: none;\n  }\n`;\n\nexport const DesktopDayList = styled.ul`\n  display: none;\n  @media screen and (min-width: calc(${variables.breakpoints.tablet} - 0.1px)) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 65px;\n\n    padding: 14px 40px;\n    margin: 0 auto;\n    margin-bottom: 18px;\n\n    width: 704px;\n    height: 46px;\n\n    background: ${variables.colors.background};\n    border: 1px solid rgba(220, 227, 229, 0.5);\n    border-radius: 8px;\n\n    @media screen and (min-width: calc(${variables.breakpoints\n        .desktop} - 0.1px)) {\n      width: 1087px;\n      height: 46px;\n\n      padding: 14px 60px;\n      margin-bottom: 15px;\n\n      gap: 122px;\n    }\n  }\n`;\nexport const WorkDay = styled.li`\n  color: ${variables.colors.text};\n  font-size: 16px;\n  font-family: Inter;\n  font-weight: 600;\n  line-height: 18px;\n  text-transform: uppercase;\n`;\n\nexport const WeekendDay = styled(WorkDay)`\n  color: ${variables.colors.primary};\n`;\n","import {\n  WorkDay,\n  WeekendDay,\n  MobileDaysList,\n  DesktopDayList,\n} from './MonthCalendarHead.styled';\n\nconst workDayNames = ['MON', 'TUE', 'WED', 'THU', 'FRI'];\nconst weekendDayNames = ['SAT', 'SUN'];\n\nexport const MonthCalendarHead = () => {\n  return (\n    <>\n      <DesktopDayList>\n        {workDayNames.map(day => (\n          <WorkDay key={day}>{day}</WorkDay>\n        ))}\n        {weekendDayNames.map(day => (\n          <WeekendDay key={day}>{day}</WeekendDay>\n        ))}\n      </DesktopDayList>\n      <MobileDaysList>\n        {workDayNames.map(day => (\n          <WorkDay key={day}>{day[0]}</WorkDay>\n        ))}\n        {weekendDayNames.map(day => (\n          <WeekendDay key={day}>{day[0]}</WeekendDay>\n        ))}\n      </MobileDaysList>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport { variables } from '../../../Styles/GlobalStyle';\n\nconst customGrey = '#dce3e580';\n\nexport const Cell = styled(Link)`\n  width: 48px;\n  height: 93px;\n  text-align: right;\n  border-bottom: 1px solid ${customGrey};\n  border-right: 1px solid ${customGrey};\n  padding: 0px 2px;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  cursor: pointer;\n\n  @media screen and (min-width: calc(${variables.breakpoints.tablet} - 0.1px)) {\n    width: 99px;\n    height: 143px;\n    padding: 0px 4px;\n  }\n\n  @media screen and (min-width: calc(${variables.breakpoints\n      .desktop} - 0.1px)) {\n    width: 155px;\n    height: 125px;\n    padding: 0px 8px;\n  }\n\n  &:nth-child(-n + 7) {\n    border-top: 1px solid ${customGrey};\n  }\n\n  &:nth-child(7n + 1) {\n    border-left: 1px solid ${customGrey};\n  }\n\n  &:nth-child(1) {\n    border-top-left-radius: 8px;\n  }\n\n  &:nth-child(7) {\n    border-top-right-radius: 8px;\n  }\n\n  &:nth-child(36) {\n    border-bottom-left-radius: 8px;\n  }\n\n  &:nth-child(42) {\n    border-bottom-right-radius: 8px;\n  }\n\n  &:hover,\n  :focus {\n    box-shadow: ${variables.shadow.shadow};\n  }\n\n  &::-webkit-scrollbar-thumb {\n    /* color of the scroll thumb */\n    background-color: ${customGrey};\n    /* roundness of the scroll thumb */\n    border-radius: 3px;\n    /* creates padding around scroll thumb */\n    border: 2px solid ${customGrey};\n  }\n\n  &::-webkit-scrollbar {\n    /* width of the entire scrollbar */\n    width: 4px;\n  }\n`;\n\nexport const LabelCell = styled.div`\n  display: inline-block;\n\n  margin-top: 8px;\n  margin-right: 4px;\n  padding: 4px 6px;\n\n  border-radius: 6px;\n\n  color: ${variables.colors.text};\n  font-size: 12px;\n  font-family: Inter;\n  font-weight: 700;\n  line-height: 1.17;\n  text-transform: uppercase;\n\n  @media screen and (min-width: calc(${variables.breakpoints.tablet} - 0.1px)) {\n    margin-top: 14px;\n    margin-right: 14px;\n\n    padding: 4px 8px;\n\n    border-radius: 8px;\n\n    font-size: 16px;\n    line-height: 1.125;\n  }\n`;\n\nexport const TodayLabelCell = styled(LabelCell)`\n  background-color: ${variables.colors.primary};\n  color: ${variables.colors.white};\n`;\n\nexport const OtherMonthLabelCell = styled(LabelCell)`\n  color: #d3d3d3;\n`;\n\nexport const CalendarWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 340px;\n  height: 564px;\n  margin: auto;\n\n  background: ${variables.colors.background};\n\n  @media screen and (min-width: calc(${variables.breakpoints.tablet} - 0.1px)) {\n    width: 704px;\n    height: 860px;\n  }\n  @media screen and (min-width: calc(${variables.breakpoints\n      .desktop} - 0.1px)) {\n    width: 1087px;\n    height: 750px;\n  }\n`;\n","import styled from 'styled-components';\n\nimport { variables } from '../../../Styles/GlobalStyle';\n\nconst backgroundColorPriority = {\n  low: variables.colors.lightBlueBackground,\n  medium: variables.colors.lightYellow,\n  high: variables.colors.lightRed,\n};\n\nconst textColorPriority = {\n  low: variables.colors.primary,\n  medium: variables.colors.mainYellow,\n  high: variables.colors.mainRed,\n};\n\nexport const Task = styled.p`\n  width: 44px;\n  height: 22px;\n  padding: 4px 4px 4px 8px;\n  margin-bottom: 1px;\n\n  background-color: ${props => backgroundColorPriority[props.priority]};\n  color: ${props => textColorPriority[props.priority]};\n\n  border-radius: 8px;\n\n  text-align: left;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  font-size: 10px;\n  font-family: Inter;\n  font-weight: 700;\n  line-height: 1.4;\n  @media screen and (min-width: calc(${variables.breakpoints.tablet} - 0.1px)) {\n    width: 92px;\n    height: 26px;\n    padding: 4px 8px 4px 8px;\n\n    font-size: 14px;\n    line-height: 1.29;\n  }\n\n  @media screen and (min-width: calc(${variables.breakpoints\n      .desktop} - 0.1px)) {\n    width: 139px;\n  }\n`;\n","import { Task } from './TaskCalendar.styled';\n\nexport const TaskCalendar = ({ task }) => {\n  const { title, priority } = task;\n  return <Task priority={priority}>{title}</Task>;\n};\n// priority: [low | medium | high] | обов'язково\n","import { startOfMonth, getDay } from 'date-fns';\nimport { useParams } from 'react-router';\n\nimport {\n  Cell,\n  CalendarWrapper,\n  LabelCell,\n  TodayLabelCell,\n  OtherMonthLabelCell,\n} from './CalendarTable.styled';\n\nimport { TaskCalendar } from '../TaskCalendar/TaskCalendar';\n\nconst isCurrentDay = date => {\n  const today = new Date();\n  if (\n    date.getDate() === today.getDate() &&\n    date.getMonth() === today.getMonth() &&\n    date.getYear() === today.getYear()\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst isCurrentMonth = (date, curentDate) => {\n  if (date.getMonth() === curentDate.getMonth()) {\n    return true;\n  }\n  return false;\n};\n\nconst isCurrentTask = (date, task) => {\n  const day = trimDate(date);\n  if (task.date === day) {\n    return true;\n  }\n  return false;\n};\n\nconst gotolink = day => {\n  return `/calendar/day/${trimDate(day)}`;\n};\n\nconst trimDate = date => {\n  var d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n};\n\nconst extendDate = string => {\n  return new Date(string);\n};\n\nexport const CalendarTable = ({ tasks }) => {\n  const { currentDate } = useParams();\n  const dateSelected = extendDate(currentDate);\n  const weekFirstDay = getDay(startOfMonth(dateSelected));\n  const calendar = [];\n\n  const daysToAddInPreviousMonth = weekFirstDay === 0 ? 6 : weekFirstDay - 1;\n  const firstDay = new Date(\n    startOfMonth(dateSelected) - daysToAddInPreviousMonth * 3600 * 1000 * 24\n  );\n\n  for (let i = 0; i < 42; i++) {\n    const result = new Date(firstDay.getTime() + i * 86400000);\n    calendar.push(result);\n  }\n\n  return (\n    <CalendarWrapper>\n      {calendar.map((day, index) => (\n        <Cell to={gotolink(day)} key={index}>\n          {isCurrentDay(day) ? (\n            <TodayLabelCell>{day.getDate()}</TodayLabelCell>\n          ) : isCurrentMonth(day, dateSelected) ? (\n            <LabelCell>{day.getDate()}</LabelCell>\n          ) : (\n            <OtherMonthLabelCell>{day.getDate()}</OtherMonthLabelCell>\n          )}\n          {tasks.map((task, index) =>\n            isCurrentTask(day, task) ? (\n              <TaskCalendar\n                key={day.toString() + index.toString()}\n                task={task}\n              />\n            ) : null\n          )}\n        </Cell>\n      ))}\n    </CalendarWrapper>\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { selectTasks } from '../../redux/tasks/selectors';\nimport { MonthCalendarHead } from './MonthCalendarHead/MonthCalendarHead';\nimport { CalendarTable } from './CalendarTable/CalendarTable';\n\nconst ChoosedMonth = () => {\n  const tasks = useSelector(selectTasks);\n\n  return (\n    <>\n      <MonthCalendarHead />\n      <CalendarTable tasks={tasks} />\n    </>\n  );\n};\n\nexport default ChoosedMonth;\n","export const selectTasks = state => state.tasks.tasks;\nexport const selectIsLoading = state => state.tasks.isLoading;\nexport const selectError = state => state.tasks.error;\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\");\n      // eslint-disable-next-line no-console\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}"],"names":["MobileDaysList","styled","variables","DesktopDayList","WorkDay","WeekendDay","workDayNames","weekendDayNames","MonthCalendarHead","map","day","customGrey","Cell","Link","LabelCell","TodayLabelCell","OtherMonthLabelCell","CalendarWrapper","backgroundColorPriority","low","medium","high","textColorPriority","Task","props","priority","TaskCalendar","task","title","isCurrentDay","date","today","Date","getDate","getMonth","getYear","gotolink","trimDate","d","month","year","getFullYear","length","join","CalendarTable","tasks","currentDate","useParams","dateSelected","weekFirstDay","getDay","startOfMonth","calendar","daysToAddInPreviousMonth","firstDay","i","result","getTime","push","index","to","curentDate","isCurrentTask","toString","useSelector","selectTasks","state","selectIsLoading","isLoading","selectError","error","requiredArgs","required","args","TypeError","dirtyDate","arguments","toDate","setDate","setHours","argument","argStr","Object","prototype","call","_typeof","console","warn","Error","stack","NaN"],"sourceRoot":""}